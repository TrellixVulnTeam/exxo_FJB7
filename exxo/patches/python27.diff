diff --git a/Lib/_exxo_hack.py b/Lib/_exxo_hack.py
new file mode 100644
index 0000000..b8f294a
--- /dev/null
+++ b/Lib/_exxo_hack.py
@@ -0,0 +1,63 @@
+import sys
+import os
+import posix
+import stat
+import zipfile
+import errno
+
+
+if zipfile.is_zipfile(sys.executable):
+    exe_zip = zipfile.ZipFile(sys.executable, 'r')
+    exe_names = exe_zip.namelist()
+zip_cache = {}
+
+
+def cached(func):
+    cache = zip_cache.setdefault(func, {})
+    def wrapped(*args):
+        ent = cache.get(args)
+        if ent is None:
+            ent = func(*args)
+            cache[args] = ent
+        return ent
+    return wrapped
+
+
+@cached
+def _get_inzip_path(filename, exc):
+    if not zipfile.is_zipfile(sys.executable):
+        raise exc(errno.ENOENT, filename)
+    inzip_path = filename[len(sys.executable):].lstrip('/')
+    if inzip_path not in exe_names:
+        # try a directory
+        inzip_path = inzip_path + '/'
+        if inzip_path not in exe_names:
+            raise exc(errno.ENOENT, filename)
+    is_dir = inzip_path.endswith('/')
+    return inzip_path, is_dir
+
+
+def get_file(filename):
+    inzip_path, _ = _get_inzip_path(filename, IOError)
+    return exe_zip.open(inzip_path)
+
+
+@cached
+def stat_file(filename):
+    inzip_path, is_dir = _get_inzip_path(filename, OSError)
+    info = exe_zip.getinfo(inzip_path)
+    stat_result = list(os.stat(sys.executable))
+    stat_result[6] = info.file_size
+    if is_dir:
+        stat_result[0] &= ~(stat.S_IFREG | stat.S_IFLNK)
+        stat_result[0] |= stat.S_IFDIR
+    return posix.stat_result(stat_result)
+
+
+@cached
+def listdir(directory):
+    fixed_directory = directory.rstrip('/') + '/'
+    inzip_path, is_dir = _get_inzip_path(fixed_directory, OSError)
+    if not is_dir:
+        raise OSError(errno.ENOTDIR, directory)
+    return [n[len(inzip_path):] for n in exe_names if n != inzip_path and n.startswith(inzip_path)]
diff --git a/Lib/ctypes/__init__.py b/Lib/ctypes/__init__.py
index e24cfd2..f234797 100644
--- a/Lib/ctypes/__init__.py
+++ b/Lib/ctypes/__init__.py
@@ -326,6 +326,29 @@ def ARRAY(typ, len):
 ################################################################
 
 
+def _dlopen_from_zip(name, mode):
+    import tempfile
+    import shutil
+    # TODO: linux only
+    with open(name, 'rb') as srcfp:
+        fd, tmpname = tempfile.mkstemp('.so')
+        try:
+            with _os.fdopen(fd, 'wb') as dstfp:
+                shutil.copyfileobj(srcfp, dstfp)
+            return _dlopen(tmpname, mode)
+        finally:
+            try:
+                _os.unlink(tmpname)
+            except OSError:
+                pass
+
+def dlopen_from_zip(name, mode):
+    try:
+        return _dlopen_from_zip(name, mode)
+    except (OSError, IOError):
+        return
+
+
 class CDLL(object):
     """An instance of this class represents a loaded dll/shared
     library, exporting functions using the standard C calling
@@ -359,7 +382,13 @@ class CDLL(object):
         self._FuncPtr = _FuncPtr
 
         if handle is None:
-            self._handle = _dlopen(self._name, mode)
+            try:
+                self._handle = _dlopen(self._name, mode)
+            except OSError:
+                handle = dlopen_from_zip(self._name, mode)
+                if handle is None:
+                    raise
+                self._handle = handle
         else:
             self._handle = handle
 
diff --git a/Lib/inspect.py b/Lib/inspect.py
index b08e145..271eff9 100644
--- a/Lib/inspect.py
+++ b/Lib/inspect.py
@@ -456,6 +456,9 @@ def getsourcefile(object):
     # or it is in the linecache
     if filename in linecache.cache:
         return filename
+    # a workaround for packages like django debug toolbar
+    if filename.startswith('<pyrun>'):
+        return filename
 
 def getabsfile(object, _filename=None):
     """Return an absolute path to the source or compiled file for an object.
diff --git a/Lib/subprocess.py b/Lib/subprocess.py
index 187566b..cd707c9 100644
--- a/Lib/subprocess.py
+++ b/Lib/subprocess.py
@@ -1195,6 +1195,21 @@ class Popen(object):
                     except:
                         pass
 
+        def __get_executable_from_zip(self, name):
+            import tempfile
+            import shutil
+            with open(name, 'rb') as srcfp:
+                fd, tmpname = tempfile.mkstemp()
+                with os.fdopen(fd, 'wb') as dstfp:
+                    shutil.copyfileobj(srcfp, dstfp)
+                os.chmod(tmpname, 0o700)
+                return tmpname
+
+        def _get_executable_from_zip(self, name):
+            try:
+                return self.__get_executable_from_zip(name)
+            except (OSError, IOError):
+                return
 
         def _execute_child(self, args, executable, preexec_fn, close_fds,
                            cwd, env, universal_newlines,
@@ -1202,6 +1217,63 @@ class Popen(object):
                            p2cread, p2cwrite,
                            c2pread, c2pwrite,
                            errread, errwrite):
+            # TODO: massive hack here: if cwd points inside zip, clear
+            # it. may be a very unexpected behaviour
+            if cwd is not None and cwd.startswith(sys.executable):
+                cwd = None
+            # TODO: another shameless hack. most existing code assumes
+            # sys.executable is an usable python binary that can be
+            # called like "sys.executable -m module", etc. we support
+            # it by adding EXXO_FORCE_STANDALONE to env
+            if executable == sys.executable or args[0] == sys.executable:
+                if env is None:
+                    env = {}
+                # it's possible to disable above behaviour in a dirty
+                # way: by settings EXXO_FORCE_STANDALONE to an empty
+                # string
+                if 'EXXO_FORCE_STANDALONE' not in env:
+                    env['EXXO_FORCE_STANDALONE'] = '1'
+            try:
+                self.__execute_child(args, executable, preexec_fn, close_fds,
+                                     cwd, env, universal_newlines,
+                                     startupinfo, creationflags, shell, to_close,
+                                     p2cread, p2cwrite,
+                                     c2pread, c2pwrite,
+                                     errread, errwrite)
+            except OSError as e:
+                if e.errno != os.errno.ENOTDIR:
+                    raise
+                exe = executable
+                if exe is None:
+                    if isinstance(args, basestring):
+                        raise
+                    exe = args[0]
+                exe = self._get_executable_from_zip(exe)
+                if exe is None:
+                    raise
+                if executable is not None:
+                    executable = exe
+                args = list(args)
+                args[0] = exe
+                try:
+                    self.__execute_child(args, executable, preexec_fn, close_fds,
+                                         cwd, env, universal_newlines,
+                                         startupinfo, creationflags, shell, to_close,
+                                         p2cread, p2cwrite,
+                                         c2pread, c2pwrite,
+                                         errread, errwrite)
+                finally:
+                    try:
+                        os.unlink(exe)
+                    except OSError:
+                        pass
+
+        def __execute_child(self, args, executable, preexec_fn, close_fds,
+                            cwd, env, universal_newlines,
+                            startupinfo, creationflags, shell, to_close,
+                            p2cread, p2cwrite,
+                            c2pread, c2pwrite,
+                            errread, errwrite):
             """Execute program (POSIX version)"""
 
             if isinstance(args, types.StringTypes):
diff --git a/Modules/_ssl.c b/Modules/_ssl.c
index f291352..0918134 100644
--- a/Modules/_ssl.c
+++ b/Modules/_ssl.c
@@ -2713,6 +2713,38 @@ _add_ca_certs(PySSLContext *self, void *data, Py_ssize_t len,
 
 
 static PyObject *
+get_cert_from_zip(PyObject *cafile)
+{
+    PyObject *mod, *func, *obj;
+
+    mod = PyImport_ImportModule("_exxo_hack");
+    if (!mod)
+        return NULL;
+
+    func = PyObject_GetAttrString(mod, "get_file");
+    Py_DECREF(mod);
+    if (!func)
+        return NULL;
+
+    obj = PyObject_CallFunction(func, "O", cafile);
+    Py_DECREF(func);
+    if (obj == NULL) {
+        PyErr_Clear();
+        return NULL;
+    }
+
+    func = PyObject_GetAttrString(obj, "read");
+    Py_DECREF(obj);
+    if (!func)
+        return NULL;
+
+    obj = PyObject_CallFunction(func, NULL);
+    Py_DECREF(func);
+    return obj;
+}
+
+
+static PyObject *
 load_verify_locations(PySSLContext *self, PyObject *args, PyObject *kwds)
 {
     char *kwlist[] = {"cafile", "capath", "cadata", NULL};
@@ -2741,18 +2773,34 @@ load_verify_locations(PySSLContext *self, PyObject *args, PyObject *kwds)
     }
 
     if (cafile) {
-        if (PyString_Check(cafile)) {
-            Py_INCREF(cafile);
-            cafile_bytes = cafile;
-        } else {
-            PyObject *u = PyUnicode_FromObject(cafile);
-            if (!u)
-                goto error;
-            cafile_bytes = PyUnicode_AsEncodedString(
-                u, Py_FileSystemDefaultEncoding, NULL);
-            Py_DECREF(u);
-            if (!cafile_bytes)
+        PyObject *cazipdata;
+
+        cazipdata = get_cert_from_zip(cafile);
+        if (cazipdata) {
+            char *cadata_buf;
+            Py_ssize_t cadata_len;
+
+            if (PyBytes_AsStringAndSize(cazipdata, &cadata_buf, &cadata_len) < 0 ||
+                _add_ca_certs(self, cadata_buf, cadata_len, SSL_FILETYPE_PEM) < 0) {
+                Py_DECREF(cazipdata);
                 goto error;
+            }
+
+            Py_DECREF(cazipdata);
+        } else {
+            if (PyString_Check(cafile)) {
+                Py_INCREF(cafile);
+                cafile_bytes = cafile;
+            } else {
+                PyObject *u = PyUnicode_FromObject(cafile);
+                if (!u)
+                    goto error;
+                cafile_bytes = PyUnicode_AsEncodedString(
+                    u, Py_FileSystemDefaultEncoding, NULL);
+                Py_DECREF(u);
+                if (!cafile_bytes)
+                    goto error;
+            }
         }
     }
     if (capath) {
diff --git a/Modules/makesetup b/Modules/makesetup
index 8862c36..2afec2d 100755
--- a/Modules/makesetup
+++ b/Modules/makesetup
@@ -176,6 +176,7 @@ sed -e 's/[ 	]*#.*//' -e '/^[ 	]*$/d' |
 			*.c++)		srcs="$srcs $arg";;
 			*.cxx)		srcs="$srcs $arg";;
 			*.cpp)		srcs="$srcs $arg";;
+			*.S)		srcs="$srcs $arg";;
 			\$*)		libs="$libs $arg"
 					cpps="$cpps $arg";;
 			*.*)		echo 1>&2 "bad word $arg in $line"
@@ -206,6 +207,7 @@ sed -e 's/[ 	]*#.*//' -e '/^[ 	]*$/d' |
 			*.cxx) obj=`basename $src .cxx`.o; cc='$(CXX)';;
 			*.cpp) obj=`basename $src .cpp`.o; cc='$(CXX)';;
 			*.m)   obj=`basename $src .m`.o; cc='$(CC)';; # Obj-C
+			*.S)   obj=`basename $src .S`.o; cc='$(CC)';;
 			*)     continue;;
 			esac
 			obj="$srcdir/$obj"
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index 4fc3ef7..4bce72e 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -1629,6 +1629,25 @@ IsUNCRootW(Py_UNICODE *path, int pathlen)
 #endif /* MS_WINDOWS */
 
 static PyObject *
+stat_inzip(PyObject *filename)
+{
+    PyObject *mod, *func, *obj;
+
+    mod = PyImport_ImportModule("_exxo_hack");
+    if (!mod)
+        return NULL;
+
+    func = PyObject_GetAttrString(mod, "stat_file");
+    Py_DECREF(mod);
+    if (!func)
+        return NULL;
+
+    obj = PyObject_CallFunction(func, "O", filename);
+    Py_DECREF(func);
+    return obj;
+}
+
+static PyObject *
 posix_do_stat(PyObject *self, PyObject *args,
               char *format,
 #ifdef __VMS
@@ -1678,7 +1697,13 @@ posix_do_stat(PyObject *self, PyObject *args,
 #ifdef MS_WINDOWS
         result = win32_error("stat", pathfree);
 #else
-        result = posix_error_with_filename(pathfree);
+        if (errno == ENOTDIR) {
+            PyObject *fn;
+            fn = PyString_FromString(pathfree);
+            result = stat_inzip(fn);
+            Py_DECREF(fn);
+        } else
+            result = posix_error_with_filename(pathfree);
 #endif
     }
     else
@@ -2276,6 +2301,25 @@ posix_link(PyObject *self, PyObject *args)
 #endif /* HAVE_LINK */
 
 
+static PyObject *
+listdir_inzip(PyObject *dir)
+{
+    PyObject *mod, *func, *obj;
+
+    mod = PyImport_ImportModule("_exxo_hack");
+    if (!mod)
+        return NULL;
+
+    func = PyObject_GetAttrString(mod, "listdir");
+    Py_DECREF(mod);
+    if (!func)
+        return NULL;
+
+    obj = PyObject_CallFunction(func, "O", dir);
+    Py_DECREF(func);
+    return obj;
+}
+
 PyDoc_STRVAR(posix_listdir__doc__,
 "listdir(path) -> list_of_strings\n\n\
 Return a list containing the names of the entries in the directory.\n\
@@ -2532,7 +2576,15 @@ posix_listdir(PyObject *self, PyObject *args)
     dirp = opendir(name);
     Py_END_ALLOW_THREADS
     if (dirp == NULL) {
-        return posix_error_with_allocated_filename(name);
+        if (errno == ENOTDIR) {
+            PyObject *res, *pyname;
+            pyname = PyString_FromString(name);
+            res = listdir_inzip(pyname);
+            Py_DECREF(pyname);
+            PyMem_Free(name);
+            return res;
+        } else
+            return posix_error_with_allocated_filename(name);
     }
     if ((d = PyList_New(0)) == NULL) {
         Py_BEGIN_ALLOW_THREADS
diff --git a/Modules/zipimport.c b/Modules/zipimport.c
index ee44cab..f9f51f0 100644
--- a/Modules/zipimport.c
+++ b/Modules/zipimport.c
@@ -2,15 +2,18 @@
 #include "structmember.h"
 #include "osdefs.h"
 #include "marshal.h"
+#include "../Python/importdl.h"
 #include <time.h>
+#include <assert.h>
 
 
 #define IS_SOURCE   0x0
 #define IS_BYTECODE 0x1
 #define IS_PACKAGE  0x2
+#define IS_SOLIB    0x4
 
 struct st_zip_searchorder {
-    char suffix[14];
+    char suffix[64];
     int type;
 };
 
@@ -19,15 +22,20 @@ struct st_zip_searchorder {
    non-package .pyc, .pyo and .py entries. The .pyc and .pyo entries
    are swapped by initzipimport() if we run in optimized mode. Also,
    '/' is replaced by SEP there. */
-static struct st_zip_searchorder zip_searchorder[] = {
+static struct st_zip_searchorder *zip_searchorder;
+static struct st_zip_searchorder zip_searchorder_base[] = {
     {"/__init__.pyc", IS_PACKAGE | IS_BYTECODE},
     {"/__init__.pyo", IS_PACKAGE | IS_BYTECODE},
     {"/__init__.py", IS_PACKAGE | IS_SOURCE},
     {".pyc", IS_BYTECODE},
     {".pyo", IS_BYTECODE},
-    {".py", IS_SOURCE},
-    {"", 0}
+    {".py", IS_SOURCE}
 };
+static const int zip_searchorder_base_len = sizeof(zip_searchorder_base) / sizeof(zip_searchorder_base[0]);
+
+extern PyObject *
+_PyImport_LoadDynamicModule(char *name, char *pathname, FILE *fp);
+extern const struct filedescr _PyImport_DynLoadFiletab[];
 
 /* zipimporter object definition and support */
 
@@ -63,9 +71,6 @@ zipimporter_init(ZipImporter *self, PyObject *args, PyObject *kwds)
     char *path, *p, *prefix, buf[MAXPATHLEN+2];
     size_t len;
 
-    if (!_PyArg_NoKeywords("zipimporter()", kwds))
-        return -1;
-
     if (!PyArg_ParseTuple(args, "s:zipimporter",
                           &path))
         return -1;
@@ -304,6 +309,85 @@ zipimporter_find_module(PyObject *obj, PyObject *args)
     return (PyObject *)self;
 }
 
+static PyObject *
+import_solib(char *fullname, PyObject *source)
+{
+    PyObject *mod = NULL;
+    char tmpbuf[] = "/tmp/zipimportXXXXXX";
+    char *src;
+    int tmp;
+    Py_ssize_t srclen;
+
+    tmp = mkstemp(tmpbuf);
+    if (tmp < 0) {
+        PyErr_SetFromErrnoWithFilename(PyExc_OSError, tmpbuf);
+        return NULL;
+    }
+
+    if (PyString_AsStringAndSize(source, &src, &srclen) < 0)
+        goto exit;
+
+    while (srclen) {
+        int wrote = write(tmp, src, srclen);
+        if (wrote < 0) {
+            PyErr_SetFromErrnoWithFilename(PyExc_OSError, tmpbuf);
+            goto exit;
+        }
+        src += wrote;
+        srclen -= wrote;
+    }
+
+    mod = _PyImport_LoadDynamicModule(fullname, tmpbuf, NULL);
+
+exit:
+    close(tmp);
+    unlink(tmpbuf);
+    return mod;
+}
+
+static PyObject *
+maybe_import_solib(ZipImporter *self, char *fullname)
+{
+    PyObject *fullpath;
+    PyObject *toc_entry = NULL, *data, *mod;
+    char path[MAXPATHLEN + 1];
+    char *subname;
+    const struct filedescr *desc;
+    int pathlen;
+
+    subname = get_subname(fullname);
+    if (subname == NULL)
+        Py_RETURN_NONE;
+
+    pathlen = make_filename(PyString_AsString(self->prefix), subname, path);
+    if (pathlen < 0)
+        Py_RETURN_NONE;
+
+    for (desc = _PyImport_DynLoadFiletab; desc->suffix != NULL; desc++) {
+        fullpath = PyString_FromFormat("%s%s", path, desc->suffix);
+        if (fullpath == NULL) {
+            Py_RETURN_NONE;
+        }
+
+        toc_entry = PyDict_GetItem(self->files, fullpath);
+        Py_DECREF(fullpath);
+        if (toc_entry != NULL)
+            break;
+    }
+    if (toc_entry == NULL)
+        return NULL;
+
+    data = get_data(PyString_AsString(self->archive), toc_entry);
+    if (data == NULL)
+        Py_RETURN_NONE;
+
+    mod = import_solib(fullname, data);
+    Py_DECREF(data);
+    if (!mod)
+        Py_RETURN_NONE;
+    return mod;
+}
+
 /* Load and return the module named by 'fullname'. */
 static PyObject *
 zipimporter_load_module(PyObject *obj, PyObject *args)
@@ -317,6 +401,14 @@ zipimporter_load_module(PyObject *obj, PyObject *args)
                           &fullname))
         return NULL;
 
+    mod = maybe_import_solib(self, fullname);
+    if (mod) {
+        if (mod == Py_None)
+            return NULL;
+        Py_DECREF(fullname);
+        return mod;
+    }
+
     code = get_module_code(self, fullname, &ispackage, &modpath);
     if (code == NULL)
         return NULL;
@@ -1260,6 +1352,16 @@ get_module_code(ZipImporter *self, char *fullname,
                 mtime = get_mtime_of_source(self, path);
             if (p_ispackage != NULL)
                 *p_ispackage = ispackage;
+
+            if (zso->type & IS_SOLIB) {
+                if (p_modpath != NULL) {
+                    PyObject *modpathobj = PyTuple_GetItem(toc_entry, 0);
+                    Py_INCREF(p_modpath);
+                    *p_modpath = PyString_AsString(modpathobj);
+                }
+                return NULL;
+            }
+
             code = get_code_from_data(self, ispackage,
                                       isbytecode, mtime,
                                       toc_entry);
@@ -1279,6 +1381,60 @@ get_module_code(ZipImporter *self, char *fullname,
     return NULL;
 }
 
+static Py_ssize_t get_dynload_file_tab_len(void)
+{
+    int i = 0;
+    while (_PyImport_DynLoadFiletab[i].suffix)
+        i++;
+    return i;
+}
+
+static int init_search_order(void)
+{
+    struct st_zip_searchorder *zso;
+    const struct filedescr *desc;
+    int i;
+
+     /* Correct directory separator */
+    zip_searchorder_base[0].suffix[0] = SEP;
+    zip_searchorder_base[1].suffix[0] = SEP;
+    zip_searchorder_base[2].suffix[0] = SEP;
+     if (Py_OptimizeFlag) {
+         /* Reverse *.pyc and *.pyo */
+         struct st_zip_searchorder tmp;
+        tmp = zip_searchorder_base[0];
+        zip_searchorder_base[0] = zip_searchorder_base[1];
+        zip_searchorder_base[1] = tmp;
+        tmp = zip_searchorder_base[3];
+        zip_searchorder_base[3] = zip_searchorder_base[4];
+        zip_searchorder_base[4] = tmp;
+    }
+
+    zip_searchorder = PyMem_Malloc(sizeof(struct st_zip_searchorder) *
+                                   (zip_searchorder_base_len + get_dynload_file_tab_len() + 1));
+    if (zip_searchorder == NULL) {
+        PyErr_SetString(PyExc_MemoryError, "zipimport: out of memory");
+        return -1;
+    }
+
+    for (i = 0, zso = zip_searchorder_base; i < zip_searchorder_base_len; zso++, i++)
+        zip_searchorder[i] = *zso;
+
+    for (desc = _PyImport_DynLoadFiletab; desc->suffix != NULL; desc++) {
+        assert(strlen(desc->suffix) < sizeof(zso->suffix));
+        zso = &zip_searchorder[i];
+        memset(zso->suffix, 0, sizeof(zso->suffix));
+        strncpy(zso->suffix, desc->suffix, sizeof(zso->suffix) - 1);
+        zso->type = IS_SOLIB;
+        i++;
+    }
+
+    /* sentinel */
+    zip_searchorder[i].suffix[0] = '\0';
+    zip_searchorder[i].type = 0;
+
+    return 0;
+}
 
 /* Module init */
 
@@ -1304,6 +1460,9 @@ initzipimport(void)
     if (PyType_Ready(&ZipImporter_Type) < 0)
         return;
 
+    if (init_search_order() < 0)
+        return;
+
     /* Correct directory separator */
     zip_searchorder[0].suffix[0] = SEP;
     zip_searchorder[1].suffix[0] = SEP;
diff --git a/Python/bltinmodule.c b/Python/bltinmodule.c
index 2977bcd..44eb09f 100644
--- a/Python/bltinmodule.c
+++ b/Python/bltinmodule.c
@@ -1500,9 +1500,38 @@ Return the octal representation of an integer or long integer.");
 
 
 static PyObject *
+get_inzip_file(PyObject *filename)
+{
+    PyObject *mod, *func, *obj;
+
+    mod = PyImport_ImportModule("_exxo_hack");
+    if (!mod)
+        return NULL;
+
+    func = PyObject_GetAttrString(mod, "get_file");
+    Py_DECREF(mod);
+    if (!func)
+        return NULL;
+
+    obj = PyObject_CallFunction(func, "O", filename);
+    Py_DECREF(func);
+    return obj;
+}
+
+
+static PyObject *
 builtin_open(PyObject *self, PyObject *args, PyObject *kwds)
 {
-    return PyObject_Call((PyObject*)&PyFile_Type, args, kwds);
+    PyObject *file_object;
+
+    file_object = PyObject_Call((PyObject*)&PyFile_Type, args, kwds);
+
+    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_IOError) && errno == ENOTDIR) {
+        PyErr_Clear();
+        file_object = get_inzip_file(PyTuple_GET_ITEM(args, 0));
+    }
+
+    return file_object;
 }
 
 PyDoc_STRVAR(open_doc,
diff --git a/Python/import.c b/Python/import.c
index 96f7d47..2ce34aa 100644
--- a/Python/import.c
+++ b/Python/import.c
@@ -1310,6 +1310,24 @@ static int case_ok(char *, Py_ssize_t, Py_ssize_t, char *);
 static int find_init_module(char *); /* Forward */
 static struct filedescr importhookdescr = {"", "", IMP_HOOK};
 
+static PyObject *_get_zipimporter(void)
+{
+    static PyObject *zipimporter = NULL;
+
+    if (zipimporter == NULL) {
+        PyObject *mod;
+
+        mod = PyImport_ImportModule("zipimport");
+        if (mod == NULL)
+            return NULL;
+
+        zipimporter = PyObject_GetAttrString(mod, "zipimporter");
+        Py_DECREF(mod);
+    }
+
+    return zipimporter;
+}
+
 static struct filedescr *
 find_module(char *fullname, char *subname, PyObject *path, char *buf,
             size_t buflen, FILE **p_fp, PyObject **p_loader)
@@ -1323,6 +1341,7 @@ find_module(char *fullname, char *subname, PyObject *path, char *buf,
     static struct filedescr fd_frozen = {"", "", PY_FROZEN};
     static struct filedescr fd_builtin = {"", "", C_BUILTIN};
     static struct filedescr fd_package = {"", "", PKG_DIRECTORY};
+    static struct filedescr fd_zip = {"", "", ZIP_IMPORT};
     char *name;
 #if defined(PYOS_OS2)
     size_t saved_len;
@@ -1486,18 +1505,25 @@ find_module(char *fullname, char *subname, PyObject *path, char *buf,
             }
             /* Note: importer is a borrowed reference */
             if (importer != Py_None) {
-                PyObject *loader;
+                PyObject *loader, *zipimporter;
                 loader = PyObject_CallMethod(importer,
                                              "find_module",
                                              "s", fullname);
                 Py_XDECREF(copy);
                 if (loader == NULL)
                     goto error_exit;  /* error */
+                zipimporter = _get_zipimporter();
+                if (zipimporter == NULL)
+                    goto error_exit;
                 if (loader != Py_None) {
                     /* a loader was found */
                     *p_loader = loader;
                     PyMem_FREE(name);
-                    return &importhookdescr;
+                    /* special case zipimporter */
+                    if (PyObject_IsInstance(loader, zipimporter))
+                        return &fd_zip;
+                    else
+                        return &importhookdescr;
                 }
                 Py_DECREF(loader);
                 continue;
@@ -1974,7 +2000,8 @@ load_module(char *name, FILE *fp, char *pathname, int type, PyObject *loader)
         Py_INCREF(m);
         break;
 
-    case IMP_HOOK: {
+    case IMP_HOOK:
+    case ZIP_IMPORT: {
         if (loader == NULL) {
             PyErr_SetString(PyExc_ImportError,
                             "import hook without loader");
@@ -2964,7 +2991,7 @@ static PyObject *
 call_find_module(char *name, PyObject *path)
 {
     extern int fclose(FILE *);
-    PyObject *fob, *ret;
+    PyObject *fob, *ret, *loader;
     struct filedescr *fdp;
     char *pathname;
     FILE *fp = NULL;
@@ -2976,11 +3003,12 @@ call_find_module(char *name, PyObject *path)
     pathname[0] = '\0';
     if (path == Py_None)
         path = NULL;
-    fdp = find_module(NULL, name, path, pathname, MAXPATHLEN+1, &fp, NULL);
+    fdp = find_module(name, name, path, pathname, MAXPATHLEN+1, &fp, &loader);
     if (fdp == NULL) {
         PyMem_FREE(pathname);
         return NULL;
     }
+    Py_XDECREF(loader);
     if (fp != NULL) {
         fob = PyFile_FromFile(fp, pathname, fdp->mode, fclose);
         if (fob == NULL) {
@@ -2992,8 +3020,24 @@ call_find_module(char *name, PyObject *path)
         fob = Py_None;
         Py_INCREF(fob);
     }
+    if (fdp->type == ZIP_IMPORT) {
+        char *newpath;
+        size_t bufsize;
+
+        bufsize = strlen(pathname) + strlen(name) + 2;
+        newpath = PyMem_MALLOC(bufsize);
+        if (newpath == NULL) {
+            PyErr_NoMemory();
+            goto exit;
+        }
+
+        PyOS_snprintf(newpath, bufsize, "%s%c%s", pathname, SEP, name);
+        PyMem_FREE(pathname);
+        pathname = newpath;
+    }
     ret = Py_BuildValue("Os(ssi)",
                   fob, pathname, fdp->suffix, fdp->mode, fdp->type);
+exit:
     Py_DECREF(fob);
     PyMem_FREE(pathname);
     return ret;
diff --git a/Python/importdl.h b/Python/importdl.h
index b4d21be..07f4468 100644
--- a/Python/importdl.h
+++ b/Python/importdl.h
@@ -17,7 +17,8 @@ enum filetype {
     C_BUILTIN,
     PY_FROZEN,
     PY_CODERESOURCE, /* Mac only */
-    IMP_HOOK
+    IMP_HOOK,
+    ZIP_IMPORT
 };
 
 struct filedescr {
