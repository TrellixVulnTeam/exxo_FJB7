diff --git a/Lib/_exxo_hack.py b/Lib/_exxo_hack.py
new file mode 100644
index 0000000..b8f294a
--- /dev/null
+++ b/Lib/_exxo_hack.py
@@ -0,0 +1,63 @@
+import sys
+import os
+import posix
+import stat
+import zipfile
+import errno
+
+
+if zipfile.is_zipfile(sys.executable):
+    exe_zip = zipfile.ZipFile(sys.executable, 'r')
+    exe_names = exe_zip.namelist()
+zip_cache = {}
+
+
+def cached(func):
+    cache = zip_cache.setdefault(func, {})
+    def wrapped(*args):
+        ent = cache.get(args)
+        if ent is None:
+            ent = func(*args)
+            cache[args] = ent
+        return ent
+    return wrapped
+
+
+@cached
+def _get_inzip_path(filename, exc):
+    if not zipfile.is_zipfile(sys.executable):
+        raise exc(errno.ENOENT, filename)
+    inzip_path = filename[len(sys.executable):].lstrip('/')
+    if inzip_path not in exe_names:
+        # try a directory
+        inzip_path = inzip_path + '/'
+        if inzip_path not in exe_names:
+            raise exc(errno.ENOENT, filename)
+    is_dir = inzip_path.endswith('/')
+    return inzip_path, is_dir
+
+
+def get_file(filename):
+    inzip_path, _ = _get_inzip_path(filename, IOError)
+    return exe_zip.open(inzip_path)
+
+
+@cached
+def stat_file(filename):
+    inzip_path, is_dir = _get_inzip_path(filename, OSError)
+    info = exe_zip.getinfo(inzip_path)
+    stat_result = list(os.stat(sys.executable))
+    stat_result[6] = info.file_size
+    if is_dir:
+        stat_result[0] &= ~(stat.S_IFREG | stat.S_IFLNK)
+        stat_result[0] |= stat.S_IFDIR
+    return posix.stat_result(stat_result)
+
+
+@cached
+def listdir(directory):
+    fixed_directory = directory.rstrip('/') + '/'
+    inzip_path, is_dir = _get_inzip_path(fixed_directory, OSError)
+    if not is_dir:
+        raise OSError(errno.ENOTDIR, directory)
+    return [n[len(inzip_path):] for n in exe_names if n != inzip_path and n.startswith(inzip_path)]
diff --git a/Lib/ctypes/__init__.py b/Lib/ctypes/__init__.py
index 5c803ff..f18d575 100644
--- a/Lib/ctypes/__init__.py
+++ b/Lib/ctypes/__init__.py
@@ -315,6 +315,29 @@ def ARRAY(typ, len):
 ################################################################
 
 
+def _dlopen_from_zip(name, mode):
+    import tempfile
+    import shutil
+    # TODO: linux only
+    with open(name, 'rb') as srcfp:
+        fd, tmpname = tempfile.mkstemp('.so')
+        try:
+            with _os.fdopen(fd, 'wb') as dstfp:
+                shutil.copyfileobj(srcfp, dstfp)
+            return _dlopen(tmpname, mode)
+        finally:
+            try:
+                _os.unlink(tmpname)
+            except OSError:
+                pass
+
+def dlopen_from_zip(name, mode):
+    try:
+        return _dlopen_from_zip(name, mode)
+    except (OSError, IOError):
+        return
+
+
 class CDLL(object):
     """An instance of this class represents a loaded dll/shared
     library, exporting functions using the standard C calling
@@ -348,7 +371,13 @@ class CDLL(object):
         self._FuncPtr = _FuncPtr
 
         if handle is None:
-            self._handle = _dlopen(self._name, mode)
+            try:
+                self._handle = _dlopen(self._name, mode)
+            except OSError:
+                handle = dlopen_from_zip(self._name, mode)
+                if handle is None:
+                    raise
+                self._handle = handle
         else:
             self._handle = handle
 
diff --git a/Lib/imp.py b/Lib/imp.py
index c922e92..3d9d4f8 100644
--- a/Lib/imp.py
+++ b/Lib/imp.py
@@ -26,6 +26,7 @@ import sys
 import tokenize
 import types
 import warnings
+from zipimport import zipimporter
 
 warnings.warn("the imp module is deprecated in favour of importlib; "
               "see the module's documentation for alternative uses",
@@ -279,6 +280,18 @@ def find_module(name, path=None):
             path = sys.path
 
     for entry in path:
+        for meta in sys.path_hooks:
+            if meta is not zipimporter:
+                continue
+            try:
+                loader = meta(entry)
+            except ImportError:
+                continue
+            print (loader, name, entry, loader.find_module(name))
+            if loader.find_module(name) is None:
+                continue
+            newpath = os.path.join(entry, name)
+            return None, newpath, ()
         package_directory = os.path.join(entry, name)
         for suffix in ['.py', machinery.BYTECODE_SUFFIXES[0]]:
             package_file_name = '__init__' + suffix
diff --git a/Lib/inspect.py b/Lib/inspect.py
index 4298de6..9b9e34d 100644
--- a/Lib/inspect.py
+++ b/Lib/inspect.py
@@ -585,6 +585,9 @@ def getsourcefile(object):
     # or it is in the linecache
     if filename in linecache.cache:
         return filename
+    # a workaround for packages like django debug toolbar
+    if filename.startswith('<pyrun>'):
+        return filename
 
 def getabsfile(object, _filename=None):
     """Return an absolute path to the source or compiled file for an object.
diff --git a/Lib/subprocess.py b/Lib/subprocess.py
index 04cfb44..2b93447 100644
--- a/Lib/subprocess.py
+++ b/Lib/subprocess.py
@@ -1332,6 +1332,21 @@ class Popen(object):
             if start_fd <= MAXFD:
                 os.closerange(start_fd, MAXFD)
 
+        def __get_executable_from_zip(self, name):
+            import tempfile
+            import shutil
+            with open(name, 'rb') as srcfp:
+                fd, tmpname = tempfile.mkstemp()
+                with os.fdopen(fd, 'wb') as dstfp:
+                    shutil.copyfileobj(srcfp, dstfp)
+                os.chmod(tmpname, 0o700)
+                return tmpname
+
+        def _get_executable_from_zip(self, name):
+            try:
+                return self.__get_executable_from_zip(name)
+            except (OSError, IOError):
+                return
 
         def _execute_child(self, args, executable, preexec_fn, close_fds,
                            pass_fds, cwd, env,
@@ -1340,6 +1355,54 @@ class Popen(object):
                            c2pread, c2pwrite,
                            errread, errwrite,
                            restore_signals, start_new_session):
+            # TODO: massive hack here: if cwd points inside zip, clear
+            # it. may be a very unexpected behaviour
+            if cwd is not None and cwd.startswith(sys.executable):
+                cwd = None
+            try:
+                self.__execute_child(args, executable, preexec_fn, close_fds,
+                                     pass_fds, cwd, env,
+                                     startupinfo, creationflags, shell,
+                                     p2cread, p2cwrite,
+                                     c2pread, c2pwrite,
+                                     errread, errwrite,
+                                     restore_signals, start_new_session)
+            except OSError as e:
+                if e.errno != os.errno.ENOTDIR:
+                    raise
+                exe = executable
+                if exe is None:
+                    if isinstance(args, str):
+                        raise
+                    exe = args[0]
+                exe = self._get_executable_from_zip(exe)
+                if exe is None:
+                    raise
+                if executable is not None:
+                    executable = exe
+                args = list(args)
+                args[0] = exe
+                try:
+                    self.__execute_child(args, executable, preexec_fn, close_fds,
+                                         pass_fds, cwd, env,
+                                         startupinfo, creationflags, shell,
+                                         p2cread, p2cwrite,
+                                         c2pread, c2pwrite,
+                                         errread, errwrite,
+                                         restore_signals, start_new_session)
+                finally:
+                    try:
+                        os.unlink(exe)
+                    except OSError:
+                        pass
+
+        def __execute_child(self, args, executable, preexec_fn, close_fds,
+                            pass_fds, cwd, env,
+                            startupinfo, creationflags, shell,
+                            p2cread, p2cwrite,
+                            c2pread, c2pwrite,
+                            errread, errwrite,
+                            restore_signals, start_new_session):
             """Execute program (POSIX version)"""
 
             if isinstance(args, (str, bytes)):
diff --git a/Makefile.pre.in b/Makefile.pre.in
index e19fc00..4d372e9 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -1083,9 +1083,9 @@ bininstall: altbininstall
 	(cd $(DESTDIR)$(BINDIR); $(LN) -s python$(VERSION)$(EXE) python3$(EXE))
 	-if test "$(VERSION)" != "$(LDVERSION)"; then \
 		rm -f $(DESTDIR)$(BINDIR)/python$(VERSION)-config; \
-		(cd $(DESTDIR)$(BINDIR); $(LN) -s python$(LDVERSION)-config python$(VERSION)-config); \
+		(cd $(DESTDIR)$(BINDIR); $(LN) -sf python$(LDVERSION)-config python$(VERSION)-config); \
 		rm -f $(DESTDIR)$(LIBPC)/python-$(LDVERSION).pc; \
-		(cd $(DESTDIR)$(LIBPC); $(LN) -s python-$(VERSION).pc python-$(LDVERSION).pc); \
+		(cd $(DESTDIR)$(LIBPC); $(LN) -sf python-$(VERSION).pc python-$(LDVERSION).pc); \
 	fi
 	-rm -f $(DESTDIR)$(BINDIR)/python3-config
 	(cd $(DESTDIR)$(BINDIR); $(LN) -s python$(VERSION)-config python3-config)
diff --git a/Modules/_io/_iomodule.c b/Modules/_io/_iomodule.c
index 44116d8..31cb666 100644
--- a/Modules/_io/_iomodule.c
+++ b/Modules/_io/_iomodule.c
@@ -218,6 +218,25 @@ PyDoc_STRVAR(open_doc,
     );
 
 static PyObject *
+get_inzip_file(PyObject *filename)
+{
+    PyObject *mod, *func, *obj;
+
+    mod = PyImport_ImportModule("_exxo_hack");
+    if (!mod)
+        return NULL;
+
+    func = PyObject_GetAttrString(mod, "get_file");
+    Py_DECREF(mod);
+    if (!func)
+        return NULL;
+
+    obj = PyObject_CallFunction(func, "O", filename);
+    Py_DECREF(func);
+    return obj;
+}
+
+static PyObject *
 io_open(PyObject *self, PyObject *args, PyObject *kwds)
 {
     char *kwlist[] = {"file", "mode", "buffering",
@@ -353,6 +372,11 @@ io_open(PyObject *self, PyObject *args, PyObject *kwds)
     /* Create the Raw file stream */
     raw = PyObject_CallFunction((PyObject *)&PyFileIO_Type,
                                 "OsiO", file, rawmode, closefd, opener);
+    if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_OSError) && errno == ENOTDIR) {
+        PyErr_Clear();
+        raw = get_inzip_file(file);
+        buffering = 65536;
+    }
     if (raw == NULL)
         return NULL;
     result = raw;
diff --git a/Modules/makesetup b/Modules/makesetup
index 8b5cc28..8666e5c 100755
--- a/Modules/makesetup
+++ b/Modules/makesetup
@@ -176,6 +176,7 @@ sed -e 's/[ 	]*#.*//' -e '/^[ 	]*$/d' |
 			*.c++)		srcs="$srcs $arg";;
 			*.cxx)		srcs="$srcs $arg";;
 			*.cpp)		srcs="$srcs $arg";;
+			*.S)		srcs="$srcs $arg";;
 			\$*)		libs="$libs $arg"
 					cpps="$cpps $arg";;
 			*.*)		echo 1>&2 "bad word $arg in $line"
@@ -206,6 +207,7 @@ sed -e 's/[ 	]*#.*//' -e '/^[ 	]*$/d' |
 			*.cxx) obj=`basename $src .cxx`.o; cc='$(CXX)';;
 			*.cpp) obj=`basename $src .cpp`.o; cc='$(CXX)';;
 			*.m)   obj=`basename $src .m`.o; cc='$(CC)';; # Obj-C
+			*.S)   obj=`basename $src .S`.o; cc='$(CC)';;
 			*)     continue;;
 			esac
 			obj="$srcdir/$obj"
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index 7c937e0..4c432ce 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -2333,6 +2333,24 @@ _pystat_fromstructstat(STRUCT_STAT *st)
 
 /* POSIX methods */
 
+static PyObject *
+stat_inzip(PyObject *filename)
+{
+    PyObject *mod, *func, *obj;
+
+    mod = PyImport_ImportModule("_exxo_hack");
+    if (!mod)
+        return NULL;
+
+    func = PyObject_GetAttrString(mod, "stat_file");
+    Py_DECREF(mod);
+    if (!func)
+        return NULL;
+
+    obj = PyObject_CallFunction(func, "O", filename);
+    Py_DECREF(func);
+    return obj;
+}
 
 static PyObject *
 posix_do_stat(char *function_name, path_t *path,
@@ -2379,7 +2397,10 @@ posix_do_stat(char *function_name, path_t *path,
     Py_END_ALLOW_THREADS
 
     if (result != 0) {
-        return path_error(path);
+        if (errno == ENOTDIR)
+            return stat_inzip(path->object);
+        else
+            return path_error(path);
     }
 
     return _pystat_fromstructstat(&st);
@@ -3611,6 +3632,25 @@ exit:
 
 
 
+static PyObject *
+listdir_inzip(PyObject *dir)
+{
+    PyObject *mod, *func, *obj;
+
+    mod = PyImport_ImportModule("_exxo_hack");
+    if (!mod)
+        return NULL;
+
+    func = PyObject_GetAttrString(mod, "listdir");
+    Py_DECREF(mod);
+    if (!func)
+        return NULL;
+
+    obj = PyObject_CallFunction(func, "O", dir);
+    Py_DECREF(func);
+    return obj;
+}
+
 PyDoc_STRVAR(posix_listdir__doc__,
 "listdir(path='.') -> list_of_filenames\n\n\
 Return a list containing the names of the files in the directory.\n\
@@ -3825,7 +3865,10 @@ _posix_listdir(path_t *path, PyObject *list)
     }
 
     if (dirp == NULL) {
-        list = path_error(path);
+        if (errno == ENOTDIR)
+            list = listdir_inzip(path->object);
+        else
+            list = path_error(path);
 #ifdef HAVE_FDOPENDIR
         if (fd != -1) {
             Py_BEGIN_ALLOW_THREADS
diff --git a/Modules/zipimport.c b/Modules/zipimport.c
index f2cc245..76219a1 100644
--- a/Modules/zipimport.c
+++ b/Modules/zipimport.c
@@ -3,14 +3,16 @@
 #include "osdefs.h"
 #include "marshal.h"
 #include <time.h>
+#include <assert.h>
 
 
 #define IS_SOURCE   0x0
 #define IS_BYTECODE 0x1
 #define IS_PACKAGE  0x2
+#define IS_SOLIB    0x4
 
 struct st_zip_searchorder {
-    char suffix[14];
+    char suffix[64];
     int type;
 };
 
@@ -23,15 +25,21 @@ _Py_IDENTIFIER(replace);
    non-package .pyc, .pyo and .py entries. The .pyc and .pyo entries
    are swapped by initzipimport() if we run in optimized mode. Also,
    '/' is replaced by SEP there. */
-static struct st_zip_searchorder zip_searchorder[] = {
-    {"/__init__.pyc", IS_PACKAGE | IS_BYTECODE},
-    {"/__init__.pyo", IS_PACKAGE | IS_BYTECODE},
-    {"/__init__.py", IS_PACKAGE | IS_SOURCE},
+static struct st_zip_searchorder *zip_searchorder;
+static struct st_zip_searchorder zip_searchorder_base[] = {
+    /* these two will be filled later in init_search_order() */
+    {"", IS_PACKAGE | IS_BYTECODE},
+    {"", IS_PACKAGE | IS_BYTECODE},
+    {"", IS_PACKAGE | IS_SOURCE},
     {".pyc", IS_BYTECODE},
-    {".pyo", IS_BYTECODE},
-    {".py", IS_SOURCE},
-    {"", 0}
+    {".py", IS_SOURCE}
 };
+static const int zip_searchorder_base_len = sizeof(zip_searchorder_base) / sizeof(zip_searchorder_base[0]);
+
+extern PyObject *
+_PyImport_LoadDynamicModule(PyObject *name, PyObject *path, FILE *fp);
+extern const char *_PyImport_DynLoadFiletab[];
+extern const char * _PySys_ImplCacheTag;
 
 /* zipimporter object definition and support */
 
@@ -55,6 +63,7 @@ static PyObject *read_directory(PyObject *archive);
 static PyObject *get_data(PyObject *archive, PyObject *toc_entry);
 static PyObject *get_module_code(ZipImporter *self, PyObject *fullname,
                                  int *p_ispackage, PyObject **p_modpath);
+static time_t get_mtime_of_source(ZipImporter *self, PyObject *path);
 
 
 #define ZipImporter_Check(op) PyObject_TypeCheck(op, &ZipImporter_Type)
@@ -289,20 +298,50 @@ check_is_directory(ZipImporter *self, PyObject* prefix, PyObject *path)
     return res;
 }
 
-/* Return some information about a module. */
+static PyObject *get_code_from_pycache(ZipImporter *self, PyObject *subname, time_t *mtime)
+{
+    PyObject *path, *fullpath, *item, *prefix;
+
+    prefix = PyUnicode_FromFormat("%U__pycache__%c", self->prefix, SEP);
+    if (prefix == NULL)
+        return NULL;
+
+    path = make_filename(prefix, subname);
+    Py_DECREF(prefix);
+    if (path == NULL)
+        return NULL;
+
+    fullpath = PyUnicode_FromFormat("%U.%s.pyc", path, _PySys_ImplCacheTag);
+    Py_DECREF(path);
+    if (fullpath == NULL)
+        return NULL;
+
+    item = PyDict_GetItem(self->files, fullpath);
+    if (mtime)
+        *mtime = get_mtime_of_source(self, fullpath);
+    Py_DECREF(fullpath);
+    if (item == NULL)
+        return NULL;
+
+    return item;
+}
+
 static enum zi_module_info
-get_module_info(ZipImporter *self, PyObject *fullname)
+get_module_info_from_pycache(ZipImporter *self, PyObject *subname)
+{
+    PyObject *item;
+
+    item = get_code_from_pycache(self, subname, NULL);
+    return item != NULL ? MI_MODULE : MI_NOT_FOUND;
+}
+
+static enum zi_module_info
+get_module_info_legacy(ZipImporter *self, PyObject *subname)
 {
-    PyObject *subname;
     PyObject *path, *fullpath, *item;
     struct st_zip_searchorder *zso;
 
-    subname = get_subname(fullname);
-    if (subname == NULL)
-        return MI_ERROR;
-
     path = make_filename(self->prefix, subname);
-    Py_DECREF(subname);
     if (path == NULL)
         return MI_ERROR;
 
@@ -312,6 +351,7 @@ get_module_info(ZipImporter *self, PyObject *fullname)
             Py_DECREF(path);
             return MI_ERROR;
         }
+
         item = PyDict_GetItem(self->files, fullpath);
         Py_DECREF(fullpath);
         if (item != NULL) {
@@ -322,10 +362,30 @@ get_module_info(ZipImporter *self, PyObject *fullname)
                 return MI_MODULE;
         }
     }
+
     Py_DECREF(path);
     return MI_NOT_FOUND;
 }
 
+/* Return some information about a module. */
+static enum zi_module_info
+get_module_info(ZipImporter *self, PyObject *fullname)
+{
+    PyObject *subname;
+    enum zi_module_info res;
+
+    subname = get_subname(fullname);
+    if (subname == NULL)
+        return MI_ERROR;
+
+    res = get_module_info_from_pycache(self, subname);
+    if (res == MI_NOT_FOUND)
+        res = get_module_info_legacy(self, subname);
+
+    Py_DECREF(subname);
+    return res;
+}
+
 typedef enum {
     FL_ERROR,
     FL_NOT_FOUND,
@@ -440,6 +500,91 @@ zipimporter_find_loader(PyObject *obj, PyObject *args)
     return result;
 }
 
+static PyObject *
+import_solib(PyObject *fullname, PyObject *source)
+{
+    PyObject *mod = NULL;
+    PyObject *tmppath = NULL;
+    char tmpbuf[] = "/tmp/zipimportXXXXXX";
+    int tmp;
+    char *src;
+    Py_ssize_t srclen;
+
+    tmp = mkstemp(tmpbuf);
+    if (tmp < 0) {
+        PyErr_SetFromErrnoWithFilename(PyExc_OSError, tmpbuf);
+        return NULL;
+    }
+
+    if (PyBytes_AsStringAndSize(source, &src, &srclen) < 0)
+        goto exit;
+
+    while (srclen) {
+        int wrote = write(tmp, src, srclen);
+        if (wrote < 0) {
+            PyErr_SetFromErrnoWithFilename(PyExc_OSError, tmpbuf);
+            goto exit;
+        }
+        src += wrote;
+        srclen -= wrote;
+    }
+
+    tmppath = PyUnicode_FromString(tmpbuf);
+    if (!tmppath)
+        goto exit;
+
+    mod = _PyImport_LoadDynamicModule(fullname, tmppath, NULL);
+
+exit:
+    close(tmp);
+    unlink(tmpbuf);
+    Py_XDECREF(tmppath);
+    return mod;
+}
+
+static PyObject *
+maybe_import_solib(ZipImporter *self, PyObject *fullname)
+{
+    PyObject *subname, *path, *fullpath;
+    PyObject *toc_entry, *data, *mod;
+    const char **suffix;
+
+    subname = get_subname(fullname);
+    if (subname == NULL)
+        Py_RETURN_NONE;
+
+    path = make_filename(self->prefix, subname);
+    Py_DECREF(subname);
+    if (path == NULL)
+        Py_RETURN_NONE;
+
+    for (suffix = _PyImport_DynLoadFiletab; *suffix != NULL; suffix++) {
+        fullpath = PyUnicode_FromFormat("%U%s", path, *suffix);
+        if (fullpath == NULL) {
+            Py_DECREF(path);
+            Py_RETURN_NONE;
+        }
+
+        toc_entry = PyDict_GetItem(self->files, fullpath);
+        Py_DECREF(fullpath);
+        if (toc_entry != NULL)
+            break;
+    }
+    Py_DECREF(path);
+    if (toc_entry == NULL)
+        return NULL;
+
+    data = get_data(self->archive, toc_entry);
+    if (data == NULL)
+        Py_RETURN_NONE;
+
+    mod = import_solib(fullname, data);
+    Py_DECREF(data);
+    if (!mod)
+        Py_RETURN_NONE;
+    return mod;
+}
+
 /* Load and return the module named by 'fullname'. */
 static PyObject *
 zipimporter_load_module(PyObject *obj, PyObject *args)
@@ -456,6 +601,14 @@ zipimporter_load_module(PyObject *obj, PyObject *args)
     if (PyUnicode_READY(fullname) == -1)
         return NULL;
 
+    mod = maybe_import_solib(self, fullname);
+    if (mod) {
+        if (mod == Py_None)
+            return NULL;
+        Py_DECREF(fullname);
+        return mod;
+    }
+
     code = get_module_code(self, fullname, &ispackage, &modpath);
     if (code == NULL)
         goto error;
@@ -1369,6 +1522,40 @@ get_code_from_data(ZipImporter *self, int ispackage, int isbytecode,
     return code;
 }
 
+/* Convert /path/to/__pycache/foo.pyc into /path/to/foo.pyc for
+ * compatibility reasons. Neither pkgutil nor pkg_resources will work
+ * with __pycache__ path at the moment. */
+static PyObject *
+strip_pycache_from_path(PyObject *path)
+{
+    wchar_t *s, *sub, *sub2;
+    PyObject *result = NULL, *newpath;
+
+    s = PyUnicode_AsWideCharString(path, NULL);
+    if (s == NULL)
+        return NULL;
+
+    sub = wcsstr(s, L"__pycache__");
+    if (sub == NULL) {
+        Py_INCREF(path);
+        result = path;
+        goto exit;
+    }
+
+    sub2 = sub + wcslen(L"__pycache__");
+    wmemmove(sub, sub2 + 1, wcslen(sub2) + 1);
+
+    newpath = PyUnicode_FromWideChar(s, wcslen(s));
+    if (newpath == NULL)
+        goto exit;
+
+    result = newpath;
+
+exit:
+    PyMem_Free(s);
+    return result;
+}
+
 /* Get the code object associated with the module specified by
    'fullname'. */
 static PyObject *
@@ -1378,11 +1565,25 @@ get_module_code(ZipImporter *self, PyObject *fullname,
     PyObject *code = NULL, *toc_entry, *subname;
     PyObject *path, *fullpath = NULL;
     struct st_zip_searchorder *zso;
+    time_t mtime = 0;
 
     subname = get_subname(fullname);
     if (subname == NULL)
         return NULL;
 
+    toc_entry = get_code_from_pycache(self, subname, &mtime);
+    if (toc_entry != NULL) {
+        code = get_code_from_data(self, 0, 1, mtime, toc_entry);
+        if (code != Py_None) {
+            if (code != NULL && p_modpath != NULL)
+                *p_modpath = strip_pycache_from_path(PyTuple_GetItem(toc_entry, 0));
+            *p_ispackage = 0;
+            Py_DECREF(subname);
+            return code;
+        }
+        Py_DECREF(code);
+    }
+
     path = make_filename(self->prefix, subname);
     Py_DECREF(subname);
     if (path == NULL)
@@ -1400,7 +1601,6 @@ get_module_code(ZipImporter *self, PyObject *fullname,
                                self->archive, (int)SEP, fullpath);
         toc_entry = PyDict_GetItem(self->files, fullpath);
         if (toc_entry != NULL) {
-            time_t mtime = 0;
             int ispackage = zso->type & IS_PACKAGE;
             int isbytecode = zso->type & IS_BYTECODE;
 
@@ -1413,6 +1613,17 @@ get_module_code(ZipImporter *self, PyObject *fullname,
             Py_CLEAR(fullpath);
             if (p_ispackage != NULL)
                 *p_ispackage = ispackage;
+
+            if (zso->type & IS_SOLIB) {
+                if (p_modpath != NULL) {
+                    *p_modpath = PyTuple_GetItem(toc_entry, 0);
+                    Py_INCREF(*p_modpath);
+                }
+                code = Py_None;
+                Py_INCREF(code);
+                goto exit;
+            }
+
             code = get_code_from_data(self, ispackage,
                                       isbytecode, mtime,
                                       toc_entry);
@@ -1422,10 +1633,8 @@ get_module_code(ZipImporter *self, PyObject *fullname,
                 Py_DECREF(code);
                 continue;
             }
-            if (code != NULL && p_modpath != NULL) {
-                *p_modpath = PyTuple_GetItem(toc_entry, 0);
-                Py_INCREF(*p_modpath);
-            }
+            if (code != NULL && p_modpath != NULL)
+                *p_modpath = strip_pycache_from_path(PyTuple_GetItem(toc_entry, 0));
             goto exit;
         }
         else
@@ -1467,6 +1676,56 @@ static struct PyModuleDef zipimportmodule = {
     NULL
 };
 
+static Py_ssize_t get_dynload_file_tab_len(void)
+{
+    int i = 0;
+    while (_PyImport_DynLoadFiletab[i])
+        i++;
+    return i;
+}
+
+static int init_search_order(void)
+{
+    struct st_zip_searchorder *zso;
+    const char **suffix;
+    int i;
+
+    snprintf(zip_searchorder_base[0].suffix, sizeof(zip_searchorder_base[0].suffix),
+             "%c__pycache__%c__init__.%s.pyc", SEP, SEP, _PySys_ImplCacheTag);
+    snprintf(zip_searchorder_base[1].suffix, sizeof(zip_searchorder_base[1].suffix),
+             "%c__pycache__%c__init__.%s.pyo", SEP, SEP, _PySys_ImplCacheTag);
+    snprintf(zip_searchorder_base[2].suffix, sizeof(zip_searchorder_base[0].suffix),
+             "%c__init__.py", SEP);
+
+    /* Correct directory separator */
+    zip_searchorder_base[3].suffix[0] = SEP;
+
+    zip_searchorder = PyMem_Malloc(sizeof(struct st_zip_searchorder) *
+                                   (zip_searchorder_base_len + get_dynload_file_tab_len() + 1));
+    if (zip_searchorder == NULL) {
+        PyErr_SetString(PyExc_MemoryError, "zipimport: out of memory");
+        return -1;
+    }
+
+    for (i = 0, zso = zip_searchorder_base; i < zip_searchorder_base_len; zso++, i++)
+        zip_searchorder[i] = *zso;
+
+    for (suffix = _PyImport_DynLoadFiletab; *suffix != NULL; suffix++) {
+        assert(strlen(*suffix) < sizeof(zso->suffix));
+        zso = &zip_searchorder[i];
+        memset(zso->suffix, 0, sizeof(zso->suffix));
+        strncpy(zso->suffix, *suffix, sizeof(zso->suffix) - 1);
+        zso->type = IS_SOLIB;
+        i++;
+    }
+
+    /* sentinel */
+    zip_searchorder[i].suffix[0] = '\0';
+    zip_searchorder[i].type = 0;
+
+    return 0;
+}
+
 PyMODINIT_FUNC
 PyInit_zipimport(void)
 {
@@ -1475,20 +1734,8 @@ PyInit_zipimport(void)
     if (PyType_Ready(&ZipImporter_Type) < 0)
         return NULL;
 
-    /* Correct directory separator */
-    zip_searchorder[0].suffix[0] = SEP;
-    zip_searchorder[1].suffix[0] = SEP;
-    zip_searchorder[2].suffix[0] = SEP;
-    if (Py_OptimizeFlag) {
-        /* Reverse *.pyc and *.pyo */
-        struct st_zip_searchorder tmp;
-        tmp = zip_searchorder[0];
-        zip_searchorder[0] = zip_searchorder[1];
-        zip_searchorder[1] = tmp;
-        tmp = zip_searchorder[3];
-        zip_searchorder[3] = zip_searchorder[4];
-        zip_searchorder[4] = tmp;
-    }
+    if (init_search_order() < 0)
+        return NULL;
 
     mod = PyModule_Create(&zipimportmodule);
     if (mod == NULL)
