diff --git a/PyRun/Runtime/Setup.PyRun-2.7 b/PyRun/Runtime/Setup.PyRun-2.7.tmpl
similarity index 92%
rename from PyRun/Runtime/Setup.PyRun-2.7
rename to PyRun/Runtime/Setup.PyRun-2.7.tmpl
index ad9ed96..05bb4f0 100644
--- a/PyRun/Runtime/Setup.PyRun-2.7
+++ b/PyRun/Runtime/Setup.PyRun-2.7.tmpl
@@ -242,7 +242,7 @@ _socket socketmodule.c
 SSL=/usr
 _ssl _ssl.c \
 	-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
-	-L$(SSL)/lib64 -L$(SSL)/lib -lssl -lcrypto
+	-L$(SSL)/lib64 -L$(SSL)/lib -Wl,-Bstatic -lssl -lcrypto -Wl,-Bdynamic
 
 # The crypt module is now disabled by default because it breaks builds
 # on many systems (where -lcrypt is needed), e.g. Linux (I believe).
@@ -488,7 +488,7 @@ cPickle cPickle.c
 # Andrew Kuchling's zlib module.
 # This require zlib 1.1.3 (or later).
 # See http://www.gzip.org/zlib/
-zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
+zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -Wl,-Bstatic -lz -Wl,-Bdynamic
 
 # Interface to the Expat XML parser
 #
@@ -532,7 +532,7 @@ _codecs_tw cjkcodecs/_codecs_tw.c
 # _ctypes needs to build libffi first - punting on this
 
 # _hashlib
-_hashlib _hashopenssl.c -I$(SSL)/include -L$(SSL)/lib64 -L$(SSL)/lib -lssl -lcrypto
+_hashlib _hashopenssl.c -I$(SSL)/include -L$(SSL)/lib64 -L$(SSL)/lib -Wl,-Bstatic -lssl -lcrypto -Wl,-Bdynamic
 
 # _heapq
 _heapq _heapqmodule.c
@@ -560,10 +560,10 @@ _sqlite3 \
 	$(SQLITE_DEFS) -I$(srcdir)/Modules/_sqlite \
 	$(SQLITE_LIBS) \
 	-I$(prefix)/include -L$(exec_prefix)/lib \
-	-lsqlite3
+	-Wl,-Bstatic -lsqlite3 -Wl,-Bdynamic
 
 # bz2
-bz2 bz2module.c -lbz2
+bz2 bz2module.c -Wl,-Bstatic -lbz2 -Wl,-Bdynamic
 
 # _json
 _json _json.c
@@ -578,3 +578,44 @@ _io	-IModules/_io \
 
 # _scproxy (used on Mac OS X only)
 # @if macosx: _scproxy ../Mac/Modules/_scproxy.c -framework SystemConfiguration -framework CoreFoundation
+
+_multiprocessing \
+	_multiprocessing/multiprocessing.c \
+	_multiprocessing/semaphore.c \
+	_multiprocessing/socket_connection.c
+
+_ctypes \
+	_ctypes/_ctypes.c \
+	_ctypes/callbacks.c \
+	_ctypes/callproc.c \
+	_ctypes/stgdict.c \
+	_ctypes/cfield.c \
+	_ctypes/libffi/src/prep_cif.c \
+	_ctypes/libffi/src/closures.c \
+	_ctypes/libffi/src/x86/ffi64.c \
+	_ctypes/libffi/src/x86/unix64.S \
+	_ctypes/libffi/src/x86/ffi.c \
+	_ctypes/libffi/src/x86/sysv.S \
+	-I$(srcdir)/Modules/_ctypes/libffi/src \
+	-I$(srcdir)/Modules/_ctypes/libffi/include \
+	-I$(srcdir)/build/temp.linux-{{ arch }}-2.7/libffi \
+	-I$(srcdir)/build/temp.linux-{{ arch }}-2.7/libffi/include
+
+spwd spwdmodule.c
+
+audioop audioop.c
+
+ossaudiodev ossaudiodev.c
+
+readline readline.c -Wl,-Bstatic -lreadline -ltermcap -Wl,-Bdynamic
+
+crypt cryptmodule.c -Wl,-Bstatic -lcrypt -Wl,-Bdynamic
+
+nis nismodule.c -Wl,-Bstatic -lnsl -Wl,-Bdynamic
+
+# _curses _cursesmodule.c -Wl,-Bstatic -lcurses -ltermcap -Wl,-Bdynamic
+# _curses_panel _curses_panel.c -Wl,-Bstatic -lpanel -lncurses -Wl,-Bdynamic
+_curses _cursesmodule.c -I{{ ncurses_dir }}/include {{ ncurses_dir }}/lib/libncurses.a -Wl,-Bstatic -ltermcap -Wl,-Bdynamic
+_curses_panel _curses_panel.c -I{{ ncurses_dir }}/include {{ ncurses_dir }}/lib/libpanel.a {{ ncurses_dir }}/lib/libncurses.a -Wl,-Bstatic -ltermcap -Wl,-Bdynamic
+
+parser parsermodule.c
diff --git a/PyRun/Runtime/Setup.PyRun-3.4 b/PyRun/Runtime/Setup.PyRun-3.4.tmpl
similarity index 87%
rename from PyRun/Runtime/Setup.PyRun-3.4
rename to PyRun/Runtime/Setup.PyRun-3.4.tmpl
index 47629a2..9ee40d6 100644
--- a/PyRun/Runtime/Setup.PyRun-3.4
+++ b/PyRun/Runtime/Setup.PyRun-3.4.tmpl
@@ -208,7 +208,7 @@ _socket socketmodule.c
 SSL=/usr
 _ssl _ssl.c \
 	-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
-	-L$(SSL)/lib64 -lssl -lcrypto
+	-L$(SSL)/lib64 -Wl,-Bstatic -lssl -lcrypto -Wl,-Bdynamic
 
 # The crypt module is now disabled by default because it breaks builds
 # on many systems (where -lcrypt is needed), e.g. Linux (I believe).
@@ -359,7 +359,7 @@ binascii binascii.c
 # Andrew Kuchling's zlib module.
 # This require zlib 1.1.3 (or later).
 # See http://www.gzip.org/zlib/
-zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
+zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -Wl,-Bstatic -lz -Wl,-Bdynamic
 
 # Interface to the Expat XML parser
 #
@@ -427,7 +427,7 @@ _opcode _opcode.c
 # _ctypes needs to build libffi first - punting on this
 
 # _hashlib
-_hashlib _hashopenssl.c -I$(SSL)/include -L$(SSL)/lib64 -L$(SSL)/lib -lssl -lcrypto
+_hashlib _hashopenssl.c -I$(SSL)/include -L$(SSL)/lib64 -L$(SSL)/lib -Wl,-Bstatic -lssl -lcrypto -Wl,-Bdynamic
 
 # _lsprof
 _lsprof _lsprof.c rotatingtree.c
@@ -449,10 +449,74 @@ _sqlite3 \
 	$(SQLITE_DEFS) -I$(srcdir)/Modules/_sqlite \
 	$(SQLITE_LIBS) \
 	-I$(prefix)/include -L$(exec_prefix)/lib \
-	-lsqlite3
+	-Wl,-Bstatic -lsqlite3 -Wl,-Bdynamic
 
 # bz2
-_bz2 _bz2module.c -lbz2
+_bz2 _bz2module.c -Wl,-Bstatic -lbz2 -Wl,-Bdynamic
+
+_lzma _lzmamodule.c -Wl,-Bstatic -llzma -Wl,-Bdynamic
 
 # _json
 _json _json.c
+
+_multiprocessing \
+	_multiprocessing/multiprocessing.c \
+	_multiprocessing/semaphore.c
+
+_ctypes \
+	_ctypes/_ctypes.c \
+	_ctypes/callbacks.c \
+	_ctypes/callproc.c \
+	_ctypes/stgdict.c \
+	_ctypes/cfield.c \
+	_ctypes/libffi/src/prep_cif.c \
+	_ctypes/libffi/src/closures.c \
+	_ctypes/libffi/src/x86/ffi64.c \
+	_ctypes/libffi/src/x86/unix64.S \
+	_ctypes/libffi/src/x86/ffi.c \
+	_ctypes/libffi/src/x86/sysv.S \
+	-I$(srcdir)/Modules/_ctypes/libffi/src \
+	-I$(srcdir)/Modules/_ctypes/libffi/include \
+	-I$(srcdir)/build/temp.linux-{{ arch }}-3.4/libffi \
+	-I$(srcdir)/build/temp.linux-{{ arch }}-3.4/libffi/include
+
+spwd spwdmodule.c
+
+audioop audioop.c
+
+ossaudiodev ossaudiodev.c
+
+readline readline.c -Wl,-Bstatic -lreadline -ltermcap -Wl,-Bdynamic
+
+_crypt _cryptmodule.c -Wl,-Bstatic -lcrypt -Wl,-Bdynamic
+
+nis nismodule.c -Wl,-Bstatic -lnsl -Wl,-Bdynamic
+
+# _curses _cursesmodule.c -Wl,-Bstatic -lcurses -ltermcap -Wl,-Bdynamic
+# _curses_panel _curses_panel.c -Wl,-Bstatic -lpanel -lncurses -Wl,-Bdynamic
+_curses _cursesmodule.c -I{{ ncurses_dir }}/include {{ ncurses_dir }}/lib/libncurses.a -Wl,-Bstatic -ltermcap -Wl,-Bdynamic
+_curses_panel _curses_panel.c -I{{ ncurses_dir }}/include {{ ncurses_dir }}/lib/libpanel.a {{ ncurses_dir }}/lib/libncurses.a -Wl,-Bstatic -ltermcap -Wl,-Bdynamic
+
+DECIMAL_DEFS=-DCONFIG_64=1 -DASM=1
+_decimal \
+	_decimal/_decimal.c \
+	_decimal/libmpdec/basearith.c \
+	_decimal/libmpdec/constants.c \
+	_decimal/libmpdec/context.c \
+	_decimal/libmpdec/convolute.c \
+	_decimal/libmpdec/crt.c \
+	_decimal/libmpdec/difradix2.c \
+	_decimal/libmpdec/fnt.c \
+	_decimal/libmpdec/fourstep.c \
+	_decimal/libmpdec/io.c \
+	_decimal/libmpdec/memory.c \
+	_decimal/libmpdec/mpdecimal.c \
+	_decimal/libmpdec/numbertheory.c \
+	_decimal/libmpdec/sixstep.c \
+	_decimal/libmpdec/transpose.c \
+	$(DECIMAL_DEFS) \
+	-I$(srcdir)/Modules/_decimal \
+	-I$(srcdir)/Modules/_decimal/libmpdec \
+	-I$(prefix)/include -L$(exec_prefix)/lib
+
+parser parsermodule.c
diff --git a/PyRun/Runtime/freeze-3/freeze.py b/PyRun/Runtime/freeze-3/freeze.py
index a52124c..08f1318 100755
--- a/PyRun/Runtime/freeze-3/freeze.py
+++ b/PyRun/Runtime/freeze-3/freeze.py
@@ -238,6 +238,7 @@ def main():
     for module in ('site', 'warnings', 'encodings.utf_8', 'encodings.latin_1'):
         if module not in exclude:
             implicits.append(module)
+    implicits.append('parser')
 
     # default prefix and exec_prefix
     if not exec_prefix:
diff --git a/PyRun/Runtime/pyrun_template.py b/PyRun/Runtime/pyrun_template.py
index 983a6ca..3998734 100644
--- a/PyRun/Runtime/pyrun_template.py
+++ b/PyRun/Runtime/pyrun_template.py
@@ -44,6 +44,7 @@ COPYRIGHT = """\
 ### Imports
 
 import sys, os
+import zipfile
 import pyrun_config
 from pyrun_config import (
     pyrun_name,
@@ -729,8 +730,11 @@ def pyrun_execute_script(pyrun_script, mode='file'):
 
 if __name__ == '__main__':
 
+    running_from_zip = zipfile.is_zipfile(sys.executable)
+
     # Parse the command line and get the script name
-    pyrun_parse_cmdline()
+    if not running_from_zip:
+        pyrun_parse_cmdline()
 
     # Enable unbuffered mode
     if pyrun_unbuffered:
@@ -744,7 +748,7 @@ if __name__ == '__main__':
         pyrun_info()
 
     # Start the runtime
-    if not sys.argv and sys.stdin.isatty():
+    if not sys.argv and sys.stdin.isatty() and not running_from_zip:
 
         ### Enter interactive mode
 
@@ -767,8 +771,11 @@ if __name__ == '__main__':
 
         ### Run a script
 
+        if running_from_zip:
+            pyrun_script = sys.executable
+            sys.argv[0] = sys.executable
         # Setup script to run
-        if not sys.argv:
+        elif not sys.argv:
             # Filter mode: read the script from stdin
             if pyrun_as_string or pyrun_as_module:
                 # Missing script argument
